package br.com.javaoito;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import javax.swing.SortOrder;

import br.com.javaoito.list.ReadFile;
import br.com.javaoito.list.vo.Person;

public class Main {
	
	public static void main(String[] args) throws IOException {
		
		ReadFile list = new ReadFile();
		
		List<Person> listPersonRead = list.readFile();
		
		// Creates a new list of a single attribute from another complete list
		List<Integer> agesList = getAgesList(listPersonRead);
		System.out.println("List (Integer) of Age: " + agesList);
		
		// creates new list of people over eighteen
		List<Person> listPerson = getListPersonOlderThanEighteen(listPersonRead);
		System.out.println("List (Person) people over eighteen: " + listPerson);
		
		// creates new list of people name starts with letter A
		List<Person> listPersonWithNameLetterA = getListPersonNameStartsWithLetterA(listPersonRead);
		System.out.println("List (Person) of people name starts with letter A: " + listPersonWithNameLetterA);
		
		// creates new list of person sorted by Descending name 
		List<Person> listPersonSortedByDescendingName = getListPersonSortedByNameDesc(listPersonRead);
		System.out.println("List (Person) of person sorted by Descending name: " + listPersonSortedByDescendingName);
		
		// creates new list of person sorted by Ascending name 
		List<Person> listPersonSortedByAscendingName = getListPersonSortedByNameAsc(listPersonRead);
		System.out.println("List (Person) of person sorted by Ascending name: " + listPersonSortedByAscendingName);
		
		// creates new Map of String and List Person grouping by city
		Map<String, List<Person>> listPersonGroupByCity = listPersonGroupByCity(listPersonRead);
		System.out.println("new Map of String and List Person grouping by city: " + listPersonGroupByCity);
		
		//listPersonGroupByCity2(listPersonRead);
		
		System.out.println(listPersonGroupByCity);
		
		//agruparJogadoresPeloTime.forEach((k, v) -> System.out.println((k + ":" + v)));
		
		// agruparJogadoresPeloTime.stream().forEach(p -> System.out.println(p.toString()));
		
	}
	
	/**
	 * @param listPerson: List Person Object
	 * @return ages: Integer List 
	**/
	private static List<Integer> getAgesList(List<Person> listPerson) {
		return listPerson.stream()
				.map(Person::getAge)
				.collect(Collectors.toList());
	}
	
	/**
	 * @param listPerson: List Person Object
	 * @return listPerson: List Person Object
	**/
	private static List<Person> getListPersonOlderThanEighteen(List<Person> listPerson) {
		return listPerson.stream()
				.filter(person -> person.getAge() > 18)
				.collect(Collectors.toList());
	}
	
	/**
	 * @param listPerson: List Person Object
	 * @return listPerson: List Person Object
	**/
	private static List<Person> getListPersonNameStartsWithLetterA(List<Person> listPerson) {
		return listPerson.stream()
				.filter(person -> person.getName().startsWith("A"))
				.collect(Collectors.toList());
	}
	
	/**
	 * @param listPerson: List Person Object
	 * @return listPerson: List Person Object
	**/
	private static List<Person> getListPersonSortedByNameDesc(List<Person> listPerson) {
		return listPerson.stream()
				.sorted(Comparator.comparing(Person::getName).reversed())
				.collect(Collectors.toList());
	}
	
	/**
	 * @param listPerson: List Person Object
	 * @return listPerson: List Person Object
	**/
	private static List<Person> getListPersonSortedByNameAsc(List<Person> listPerson) {
		return listPerson.stream()
				.sorted(Comparator.comparing(Person::getName))
				.collect(Collectors.toList());
	}
	
	/**
	 * 
	 * @param listPerson
	 * @return Map of String and List Person grouping by city 
	 */
	private static Map<String, List<Person>> listPersonGroupByCity(List<Person> listPerson){
		return listPerson.stream()
				.collect(Collectors.groupingBy(Person::getCity));
      
	}
	
	/*
	 * private static void listPersonGroupByCity2(List<Person> listPerson){
	 * Map<String, Long> teste = listPerson.stream()
	 * .collect(Collectors.groupingBy(Person::getCity, Collectors.counting()));
	 * 
	 * System.out.println(teste);
	 * 
	 * }
	 */
}